@page "/counter"
@inject IJSRuntime JS

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<h3>Normal</h3>
<select multiple class="form-control">
    @foreach (var item in forecasts)
    {
        <option value="@item" @onclick=@((e) => OptionClickEvent(@item, e))>@item</option>
    }
</select>
<p>Selected Value: @string.Join(',', lstValues)</p>

<h3>Bootstrap Multi Select</h3>

<select multiple class="form-control" id="ddlForecast">
    @foreach (var item in forecasts)
    {
        <option value="@item">@item</option>
    }
</select>
<p>Selected Value: <span id="vals"></span></p>

@code {
    private int currentCount = 0;
    private List<string> lstValues = new List<string>();
    public string val { get; set; }

    private void IncrementCount()
    {
        currentCount++;
    }

    private string[] forecasts;

    protected override void OnInitialized()
    {
        forecasts = new string[] { "Summer", "Winter", "Autumn", "Spring" };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("initDDLs", null);
        await base.OnAfterRenderAsync(firstRender);
    }

    public void OptionClickEvent(string values, MouseEventArgs evnt)
    {
        if (evnt.CtrlKey)
        {
            if (lstValues.Exists(x => x == values))
                lstValues.Remove(values);
            else
                lstValues.Add(values.ToString());
        }
        else
        {
            lstValues.Clear();
            lstValues.Add(values.ToString());
        }
    }
}